//
//  ListViewController.swift
//  CleanSwift_GetData
//
//  Created by brian은석 on 2021/02/02.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class {
    func displayFetchedList(viewModel: List.FetchData.ViewModel)
}

class ListViewController: UIViewController, ListDisplayLogic {
    var interactor: ListBusinessLogic?
    var router: (ListRoutingLogic & ListDataPassing)?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    // MARK: - UI
    @IBOutlet weak var tableView: UITableView!
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        
        // worker 도 setup 하는게 맞을까? url 이렇게?
        let worker = ListWorker(url: .getData)
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        //1번
        fetch()
    }
    
    //5번
    func displayFetchedList(viewModel: List.FetchData.ViewModel) {
        displayedInforData = viewModel.displayedList
        DispatchQueue.main.async {[weak self] in
            self?.tableView.reloadData()
        }
        
    }
    
    //인터렉터 -> 리스트 불러와
    func fetch() {
        let request = List.FetchData.Request()
        interactor?.fetchData(request: request)
    }
    
    var displayedInforData: [List.FetchData.ViewModel.DisplayedInformation] = []
    
}

extension ListViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedInforData.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedInfor = displayedInforData[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath) as! ListTableViewCell
        cell.inputData(name: displayedInfor.name, age: displayedInfor.age)
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //6번
        router?.routeTo(destination: .Get, selectedRow: indexPath.row)
    }
    
    
}
