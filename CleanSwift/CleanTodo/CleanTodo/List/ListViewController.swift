//
//  ListViewController.swift
//  CleanTodo
//
//  Created by brian은석 on 2021/01/16.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class {
    func displayFetchedList(viewModel: List.FetchToDos.ViewModel)
}

class ListViewController: UIViewController, ListDisplayLogic {
    var interactor: ListBusinessLogic?
    var router: (ListRoutingLogic & ListDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - UI
    @IBOutlet weak var tableView: UITableView!
    
    
    // MARK: Routing
    @IBAction func createAction(_ sender: Any) {
        router?.routeTo(destination: .Create)
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchToDo()
    }
    
    // MARK: - Fetch orders
    
    var displayedToDos: [List.FetchToDos.ViewModel.DisplayedToDo] = []
    
    
    //인터렉터 -> 리스트를 불러와라
    func fetchToDo() {
        let request = List.FetchToDos.Request()
        interactor?.fetchToDos(request: request)
    }
    
    func displayFetchedList(viewModel: List.FetchToDos.ViewModel){
        displayedToDos = viewModel.displayedList
        tableView.reloadData()
    }
}


extension ListViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        displayedToDos.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedToDo = displayedToDos[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "listCell", for: indexPath) as! ListTableViewCell
//        cell.inputData(title: displayedToDo.title, isChecked: displayedToDo.isChecked)
        cell.selectionStyle = .none
        return cell
    }
    
    //질문: 체크이벤트는 델리게이트를 써도 되는건가요?
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //check update
        interactor?.updateCheck(index: indexPath.row)
    }
    
}
